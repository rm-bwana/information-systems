{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Friendspace",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:7700",
  "basePath": "/",
  "tags": [
    {
      "name": "dude",
      "description": "Something about someone",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "article",
      "description": "Writing from someone",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/dude": {
      "post": {
        "tags": [
          "dude"
        ],
        "summary": "Add a new dude to the list",
        "description": "",
        "operationId": "addDude",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dude object that needs to be added to the list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dude"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/dude/{dudeId}": {
      "get": {
        "tags": [
          "dude"
        ],
        "summary": "Find dude by ID",
        "description": "Returns a single dude",
        "operationId": "getDudeById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "dudeId",
            "in": "path",
            "description": "ID of dude to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Dude"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Dude not found"
          }
        }
      }
    },
    "/article/{articleId}": {
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Find article by ID",
        "description": "Returns a single article",
        "operationId": "getArticleById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of article to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Article"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          }
        }
      }
    },
    "/article/{articleId}/upvote": {
      "put": {
        "tags": [
          "article"
        ],
        "summary": "Upvote an existing article",
        "description": "",
        "operationId": "upvote",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of article to upvote",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    }
  },
  "definitions": {
    "Dude": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "lebowski"
        },
        "articles": {
          "type": "array",
          "xml": {
            "name": "article",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Article"
          }
        },
        "status": {
          "type": "string",
          "description": "the dude's status",
          "enum": [
            "available",
            "writing",
            "bowling"
          ]
        }
      },
      "xml": {
        "name": "Dude"
      }
    },
    "Article": {
      "type": "object",
      "required": [
        "dude",
        "title"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "dude": {
          "type": "string",
          "example": "lebowski"
        },
        "title": {
          "type": "string",
          "example": "some text"
        },
        "votes": {
          "type": "integer",
          "format": "int8"
        }
      },
      "xml": {
        "name": "Article"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}